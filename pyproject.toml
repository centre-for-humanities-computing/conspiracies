[project]
name = "conspiracies"
version = "0.8.0"
authors = [
    {name = 'Kasper Fyhn'},
    {name = 'Kenneth Enevoldsen'},
    {name = "Lasse Hansen"},
    {name = "Ekaterina Borisova"},
    {name = 'Stephan Smuts"'},
]
description = "Discover and examine conspiracies using natural language processing"
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: MIT License",
]
requires-python = ">=3.10"
dependencies = [
    "spacy",
    "typing-extensions",
    "spacy-transformers",
    "confection",
    # allenNLP packages
    "allennlp",
    "allennlp-models",
    # transformers
    "transformers",
    # base+
    "torch",
    "numpy",
    "pandas",
    "jsonlines",
    "openai",
    "ndjson",
    "networkx",
    "matplotlib",
    "umap-learn",
    "hdbscan",
    "sentence-transformers",
    "stop-words",
    "bs4",
    "toml"
]

[project.license]
file = "LICENSE"
name = "MIT"

[project.urls]
homepage = "https://github.com/centre-for-humanities-computing/conspiracies"
repository = "https://github.com/centre-for-humanities-computing/conspiracies"
documentation = "https://centre-for-humanities-computing.github.io/conspiracies/"

[project.optional-dependencies]
style = [
    "black",
    "pre-commit",
    "ruff",
    "mypy"
]
tests = [
    "pytest",
    "pytest-cov",
]
docs = [
    "sphinx",
    "furo",
    "sphinx-copybutton",
    "sphinxext-opengraph",
    "sphinx_design",
    "myst-nb",
    "sphinx_togglebutton"
]
tutorials = [
    "jupyter"
]
openai = [
    "openai"
]

[project.readme]
file = "README.md"
content-type = "text/markdown"


[project.entry-points.spacy_factories]
"prompt_relation_extraction" = "conspiracies.docprocessing.relationextraction.gptprompting:create_prompt_relation_extraction_component"
"relation_extractor" = "conspiracies.docprocessing.relationextraction.multi2oie:make_relation_extractor"
"allennlp_coref" = "conspiracies.docprocessing.coref:create_coref_component"
"heads_extraction" = "conspiracies.docprocessing.headwordextraction:create_headwords_component"


[build-system]
requires = ["setuptools", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"


[tool.coverage.run]
omit = [
    "**/tests/*",
    "**/_vendorized/*",
    "**/about.py",
]

exclude_lines = [
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __unicode__",
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.distutils.bdist_wheel]
universal = true

[tool.distutils.sdist]
formats = "gztar"


[tool.mypy]
ignore_missing_imports = true
no_implicit_optional = true

[tool.semantic_release]
branch = "main"
version_variable = [
    "pyproject.toml:version"
]
build_command = "python -m pip install build; python -m build"

[tool.ruff]
exclude = [
    ".venv",
    ".env",
    ".git",
    "__pycache__",
    "paper"
]